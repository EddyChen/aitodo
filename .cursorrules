# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- **AI模型选择**: 对于需要严格JSON格式输出的任务，`deepseek/deepseek-chat` 比 `deepseek/deepseek-r1-0528:free` 更稳定可靠
- **AI提示优化**: 在系统提示中必须明确要求严格的JSON格式输出，并提供具体示例格式
- **OpenRouter调试**: `deepseek/deepseek-r1-0528:free` 模型可能返回空响应，需要详细日志调试
- **OpenRouter API密钥**: 生产环境中OpenRouter API密钥失效，返回401 "No auth credentials found"错误
- **数据库Schema错误**: 分享功能中SQL语句引用了不存在的`updated_at`字段，需要与实际数据库结构保持一致
- **状态同步问题**: PUT API更新任务后需要返回包含分享权限信息的完整数据，否则前端权限判断会失效
- **OpenRouter限流问题**: `google/gemini-2.0-flash-exp:free` 免费模型在OpenRouter上存在限流，可能导致生产环境500错误，需要考虑付费模型或重试机制

# Scratchpad

## Current Task: 日历主界面优化

### Task Overview
优化日历显示主界面，主要包括：
1. 将日历每天右下角的小圆点改为显示未完成任务数量
2. 在日历上明确显示工作日、休息日、法定节假日
3. 使用节假日API获取日期信息并缓存结果
4. 创建新的版本标签和开发分支

### 产品需求
1. **任务数量显示**: 将日历每天右下角的小圆点改为数字，显示当天未完成的任务数量
2. **日期类型标识**: 每天明确显示工作日、休息日、法定节假日状态
3. **节假日API集成**: 使用 `https://api.apihubs.cn/holiday/get` 接口获取节假日信息
4. **数据缓存**: 将节假日查询结果缓存到KV存储或R2对象存储

### 技术要求
1. **版本管理**: 创建tag v0.1-202506 和新分支 dev
2. **兼容性**: 不影响现有功能
3. **性能优化**: 缓存节假日数据，减少API调用

### 开发计划
[X] 1. 查看现有CalendarPage.vue实现，了解当前日历渲染逻辑
[X] 2. 创建新的git tag和分支 - 创建tag v0.1-202506 和分支 dev
[X] 3. 设计节假日数据获取和缓存方案 - 使用KV存储，7天缓存
[X] 4. 实现节假日API接口调用 - functions/api/holidays.js 已完成
[X] 5. 修改日历显示逻辑：小圆点改为任务数量 - 已实现任务数量显示
[X] 6. 添加工作日/休息日/法定节假日标识 - 已添加"班"/"休"/"假"标识
[X] 7. 实现数据缓存机制 - KV存储缓存已实现
[X] 8. 测试新功能 - 构建成功，已部署到生产环境
[X] 9. 部署到生产环境 - 已部署到 https://dev.ai-todo-assistant.pages.dev

### 当前状态
🎉 **日历界面优化功能开发完成！**

**✅ 主要成就：**
- **任务数量显示**: 将原来的小圆点改为显示当天未完成任务的数量
- **日期类型标识**: 每天明确显示工作日(班)、休息日(休)、法定节假日(假)
- **节假日API集成**: 使用 `https://api.apihubs.cn/holiday/get` 获取准确的节假日信息
- **智能缓存**: KV存储缓存节假日数据7天，减少API调用次数
- **版本管理**: 创建了tag v0.1-202506，在dev分支开发

**🌐 部署信息：**
- **开发分支URL**: https://dev.ai-todo-assistant.pages.dev  
- **部署URL**: https://b84cfa24.ai-todo-assistant.pages.dev
- **KV命名空间**: AI_TODO_KV (21d6eaa05468481295072f6af3873963)

**🎨 界面改进：**
- 日历每天显示更丰富的信息：日期数字、类型标识、任务数量
- 不同日期类型有不同的颜色标识：
  - 🔵 蓝色背景 = 工作日
  - 🟢 绿色背景 = 休息日
  - 🔴 红色背景 = 法定节假日
  - 🟡 黄色背景 = 调休工作日
- 任务数量显示在右下角的圆形徽章中
- 界面更简洁美观，去除了文字标识

### API接口分析
节假日API: `https://api.apihubs.cn/holiday/get?size=500&month=202506`
主要字段：
- `workday`: 是否为工作日（包含调休）
- `weekend`: 是否为周末  
- `holiday_legal`: 是否为法定节假日
- `date`: 公历日期