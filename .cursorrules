# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- **AI模型选择**: 对于需要严格JSON格式输出的任务，`deepseek/deepseek-chat` 比 `deepseek/deepseek-r1-0528:free` 更稳定可靠
- **AI提示优化**: 在系统提示中必须明确要求严格的JSON格式输出，并提供具体示例格式
- **OpenRouter调试**: `deepseek/deepseek-r1-0528:free` 模型可能返回空响应，需要详细日志调试
- **OpenRouter API密钥**: 生产环境中OpenRouter API密钥失效，返回401 "No auth credentials found"错误
- **数据库Schema错误**: 分享功能中SQL语句引用了不存在的`updated_at`字段，需要与实际数据库结构保持一致
- **状态同步问题**: PUT API更新任务后需要返回包含分享权限信息的完整数据，否则前端权限判断会失效

# Scratchpad

## Current Task: AI文本解析精度优化

### Task Overview
用户发现AI日期时间解析不够精确的问题，需要改进解析策略以确保待办事项的准确性。

### 问题分析
1. **日期解析不精确**: "下周六"被错误解析为"本周六"
2. **时间推测过于随意**: 对"下午"等模糊时间直接推测，容易导致错误

### 改进方案
[X] 1. 日期解析精度提升 - 添加动态周期计算，准确区分本周/下周
[X] 2. 时间处理策略优化 - 对模糊时间主动询问而非推测
[X] 3. AI提示优化 - 调整系统提示，强调时间日期的重要性
[X] 4. 本地测试验证 - 验证"下周五下午"解析效果
[X] 5. 部署到生产环境 - https://todo.chenrf.top
[X] 6. 代码提交到GitHub - commit 419f986

### 技术改进详情
**日期计算优化**:
```javascript
const currentDay = now.getDay(); // 0=Sunday, 1=Monday, ..., 6=Saturday
const daysToThisWeekend = (6 - currentDay) % 7;
const thisWeekSaturday = new Date(now.getTime() + daysToThisWeekend * 24*60*60*1000);
const nextWeekSaturday = new Date(now.getTime() + (daysToThisWeekend + 7) * 24*60*60*1000);
```

**时间处理策略**:
- 模糊时间（上午/下午/晚上）-> 询问具体时间
- 明确时间（14:00/16:30）-> 直接使用

### 测试结果
✅ "下周五下午" -> 正确解析为2025-06-20，询问具体时间
✅ 用户补充"16:00" -> 正确更新时间，清空问题
✅ 对话流程完整，用户体验良好

### 生产环境域名
- **自定义域名**: todo.chenrf.top
- **说明**: 用户申请的自定义域名，后续所有生产环境相关操作都使用此域名

### 用户体验改进
[X] 1. 分享来源显示 - 别人分享的待办任务显示"来自 xxx"标签
[X] 2. 权限视觉区分 - 只读任务显示眼睛图标，可编辑任务显示checkbox
[X] 3. 权限逻辑控制 - 只有拥有者和有写权限的用户才能编辑

### 技术细节
- 错误类型: D1数据库列不存在错误
- 影响功能: 待办事项分享
- 修复文件: functions/api/share.js
- 本地测试: http://localhost:8788