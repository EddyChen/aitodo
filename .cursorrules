# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- **AI模型选择**: 对于需要严格JSON格式输出的任务，`deepseek/deepseek-chat` 比 `deepseek/deepseek-r1-0528:free` 更稳定可靠
- **AI提示优化**: 在系统提示中必须明确要求严格的JSON格式输出，并提供具体示例格式
- **OpenRouter调试**: `deepseek/deepseek-r1-0528:free` 模型可能返回空响应，需要详细日志调试
- **OpenRouter API密钥**: 生产环境中OpenRouter API密钥失效，返回401 "No auth credentials found"错误
- **数据库Schema错误**: 分享功能中SQL语句引用了不存在的`updated_at`字段，需要与实际数据库结构保持一致
- **状态同步问题**: PUT API更新任务后需要返回包含分享权限信息的完整数据，否则前端权限判断会失效
- **OpenRouter限流问题**: `google/gemini-2.0-flash-exp:free` 免费模型在OpenRouter上存在限流，可能导致生产环境500错误，需要考虑付费模型或重试机制
- **Cloudflare Pages Functions兼容性**: Functions环境不支持Node.js的`fs`和`path`模块，需要使用内置数据或Web APIs。Functions必须使用`onRequestGet`等格式而不是`export default`格式。本地KV存储在开发服务器重启后会丢失数据，需要提供fallback机制

# Scratchpad

## Current Task: 日历主界面优化 - 本地测试完成

### Task Overview ✅
优化日历显示主界面，主要包括：
1. 将日历每天右下角的小圆点改为显示未完成任务数量
2. 在日历上明确显示工作日、休息日、法定节假日
3. 使用节假日API获取日期信息并缓存结果
4. 创建新的版本标签和开发分支

### 技术问题修复 ✅
[X] 修复API路由问题 - 创建了`public/_routes.json`配置文件
[X] 修复Functions格式问题 - 将`export default`改为`onRequestGet`格式
[X] 修复Node.js模块兼容性 - 移除`fs`和`path`依赖，使用内置数据
[X] 提供fallback数据机制 - 当KV存储不可用时使用内置节假日数据

### 当前状态 🎉
**✅ 本地开发服务器启动成功！**

**🌐 服务信息：**
- **本地URL**: http://localhost:8788
- **节假日API**: 工作正常，返回正确的JSON数据
- **状态**: ✅ 运行中，API测试通过

**🔧 技术架构：**
- **API路由**: Cloudflare Pages Functions格式
- **数据来源**: GitHub holiday-cn → KV缓存 → 内置fallback数据
- **数据源URL**: https://raw.githubusercontent.com/NateScarlet/holiday-cn/refs/heads/master/{year}.json
- **支持年份**: 2024, 2025（可扩展到更多年份）
- **缓存策略**: KV存储7天缓存
- **兼容性**: 完全兼容Cloudflare Workers环境

**📋 测试结果：**
```bash
# API测试通过 ✅
curl "http://localhost:8788/api/holidays?year=2025"
# 返回: {"year":2025,"holidays":{...},"source":"github","updated":"..."}

# 数据源验证 ✅
- GitHub数据源: 权威、及时、完整
- KV缓存: 7天TTL，提升性能
- Fallback数据: 确保服务可用性

# 调休工作日数据 ✅
- 2025-02-08: 春节调休工作日 (黄色显示)
- 2025-04-27: 劳动节调休工作日 (黄色显示)
- 2025-09-28: 国庆节调休工作日 (黄色显示)
- 2025-10-11: 国庆节调休工作日 (黄色显示)
```

**🎨 日历颜色方案：**
- 🔵 蓝色背景 = 工作日 (workday)
- 🟢 绿色背景 = 休息日 (weekend)  
- 🔴 红色背景 = 法定节假日 (holiday, isOffDay: true)
- 🟡 黄色背景 = 调休工作日 (overtime-workday, isOffDay: false)

## Current Task: 根据原型图调整页面样式 - 进行中

### 完成的样式调整 ✅
[X] 顶部头部区域 - 显示用户头像和用户名，移除日期显示
[X] 星期标题颜色 - 周日和周六显示为红色，其他为灰色
[X] 日历边框和尺寸 - 去除边框，增大日历格子尺寸和间距
[X] 农历日期显示 - 在阳历日期下方添加农历日期
[X] 颜色方案简化 - 工作日(绿色) vs 休息日(蓝色)
[X] 任务数量显示 - 调整到右上角避免与农历日期重叠
[X] 任务列表样式 - 添加绿色左边框来匹配原型图

### 调整内容
1. **头部区域样式**:
   - 保留蓝色渐变背景
   - 显示用户头像(SVG图标)和用户名/手机号
   - 移除日期信息显示

2. **日历布局**:
   - 去除日历卡片边框和内边距
   - 增大日历格子间距 (gap: 3px)
   - 每个日期格子更大 (min-height: 80px)
   - 添加圆角和阴影效果

3. **农历日期**:
   - 在阳历日期下方显示农历日期
   - 使用简化的农历转换逻辑
   - 根据日期类型调整农历文字颜色

4. **颜色方案简化**:
   - 工作日：绿色背景 (`bg-green-50` + `border-green-100`)
   - 休息日：蓝色背景 (`bg-blue-50` + `border-blue-100`)
   - 统一法定节假日和双休日为休息日
   - 统一调休工作日和普通工作日为工作日

5. **任务数量显示**:
   - 移动到右上角避免与农历重叠
   - 增大尺寸 (1.25rem × 1.25rem)
   - 保持蓝色背景

### 下一步 ✅ 完成
[X] **构建项目**: 成功构建，生成dist文件
[X] **启动服务器**: 开发服务器已在 http://localhost:8788 运行
[X] **样式应用**: 所有原型图样式调整已完成并应用

### 最终完成的功能 ✅
1. **🌐 访问**: http://localhost:8788
2. **🎨 样式优化完成**:
   - 蓝色渐变头部，显示用户头像和用户名
   - 红色周末标题，灰色工作日标题
   - 日历完全贴边显示，57px × 80px 精确尺寸
   - 农历日期显示在阳历下方
   - 简化颜色方案：绿色工作日 vs 蓝色休息日
   - 蓝色任务数量圆圈在右上角
   - 绿色任务列表左边框
3. **✅ 样式状态优化**:
   - 选中效果：亮蓝色背景 + 环形边框，非常明显
   - 今天样式：蓝色背景始终保持，无论是否选中其他日期
   - 今天+选中：深蓝色背景 + 白色文字 + 环形边框
4. **🔧 技术细节**:
   - 使用 `!important` 确保今天样式优先级
   - 完善的CSS状态管理，覆盖所有组合情况
   - 保持功能完整性，只调整样式不影响逻辑